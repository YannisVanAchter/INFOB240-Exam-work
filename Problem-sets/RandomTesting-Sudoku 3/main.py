
import math
from copy import deepcopy

from gpt_checker import is_valid_sudoku as check_gpt
from gpt_solver import solve_sudoku as solve_gpt

from sudoku_checker1 import check_sudoku as check_yannis
from sudoku_solver import solve_sudoku as solve_yannis

def print_sudoku(grid: list) -> (None):
    """Print sudoku grid

    The sudoku will follow this parten\n
    +-------++-------++-------+ \n
    | X X X || X X X || X X X | \n
    | X X X || X X X || X X X | \n
    | X X X || X X X || X X X | \n
    +-------++-------++-------+ \n
    | X X X || X X X || X X X | \n
    | X X X || X X X || X X X | \n
    | X X X || X X X || X X X | \n
    +-------++-------++-------+ \n
    | X X X || X X X || X X X | \n
    | X X X || X X X || X X X | \n
    | X X X || X X X || X X X | \n
    +-------++-------++-------+ \n

    Parameters:
    -----------
        grid (list): grid
    """
    if type(grid) != list:
        print(grid)
        return
    
    size = int(math.sqrt(len(grid)))
    for row_id, row in enumerate(grid):
        # separators row
        if row_id in (i*size for i in range(size)):
            print(("+" + ("-" * (size * 2 + 1) + "+") )* size, end="\n| ")
        else: 
            print('|', end=" ")
        
        # print element
        for column_id, column in enumerate(row):
            if column_id in (i*size for i in range(1, size)):
                print("||", end=" ")
            print(column, end=' ')
        
        print("| ") # next line
    print(("+" + ("-" * (size * 2 + 1) + "+") )* size)

def compare(grid, id_):
    solved_gpt = solve_gpt(deepcopy(grid))
    solved_yannis = solve_yannis(deepcopy(grid))
    
    if not check_gpt(solved_yannis):
        print("Yannis is wrong with id:", id_)
        print_sudoku(solved_yannis)
    if not check_yannis(solved_gpt):
        print("GPT is wrong with id:", id_)
        print_sudoku(solved_gpt)

if __name__ == "__main__": # pragma: no cover
    data_test = [
        # 0. solve_sudoku should return None
        (
            None,
            [
                [5,3,4, 6,7,8, 9,1,2],
                [6,7,2, 1,9,5, 3,4,8],
                [1,9,8, 3,4,2, 5,6,7],
                # ------------------
                [8,5,9, 7,6,1, 4,2,3],
                [4,2,6, 8,5,3, 7,9],  # <---
                [7,1,3, 9,2,4, 8,5,6],
                # ------------------
                [9,6,1, 5,3,7, 2,8,4],
                [2,8,7, 4,1,9, 6,3,5],
                [3,4,5, 2,8,6, 1,7,9],
            ],
        ),
        # 1. solve_sudoku should return: the same
        (
            [
                [5,3,4, 6,7,8, 9,1,2],
                [6,7,2, 1,9,5, 3,4,8],
                [1,9,8, 3,4,2, 5,6,7],
                # --------------------
                [8,5,9, 7,6,1, 4,2,3],
                [4,2,6, 8,5,3, 7,9,1],
                [7,1,3, 9,2,4, 8,5,6],
                # --------------------
                [9,6,1, 5,3,7, 2,8,4],
                [2,8,7, 4,1,9, 6,3,5],
                [3,4,5, 2,8,6, 1,7,9],
            ],
            [
                [5,3,4, 6,7,8, 9,1,2],
                [6,7,2, 1,9,5, 3,4,8],
                [1,9,8, 3,4,2, 5,6,7],
                # --------------------
                [8,5,9, 7,6,1, 4,2,3],
                [4,2,6, 8,5,3, 7,9,1],
                [7,1,3, 9,2,4, 8,5,6],
                # --------------------
                [9,6,1, 5,3,7, 2,8,4],
                [2,8,7, 4,1,9, 6,3,5],
                [3,4,5, 2,8,6, 1,7,9],
            ],
        ),
        # 2. check_sudoku should return False
        (
            False,
            [
                [5,3,4, 6,7,8, 9,1,2],
                [6,7,2, 1,9,5, 3,4,8],
                [1,9,8, 3,8,2, 5,6,7],
                # --------------------
                [8,5,9, 7,6,1, 4,2,3],
                [4,2,6, 8,5,3, 7,9,1],
                [7,1,3, 9,2,4, 8,5,6],
                # --------------------
                [9,6,1, 5,3,7, 2,8,4],
                [2,8,7, 4,1,9, 6,3,5],
                [3,4,5, 2,8,6, 1,7,9],
            ],
        ),
        # 3. check_sudoku should return True : easy
        (
            [
                [2,9,4, 5,6,3, 1,7,8],
                [3,1,6, 7,2,8, 4,9,5],
                [8,5,7, 1,4,9, 6,3,2],
                # --------------------
                [6,2,9, 4,3,1, 5,8,7],
                [5,7,3, 6,8,2, 9,1,4],
                [1,4,8, 9,5,7, 2,6,3],
                # --------------------
                [7,6,5, 3,9,4, 8,2,1],
                [9,8,1, 2,7,5, 3,4,6],
                [4,3,2, 8,1,6, 7,5,9],
            ],
            [
                [2,9,0, 0,0,0, 0,7,0],
                [3,0,6, 0,0,8, 4,0,0],
                [8,0,0, 0,4,0, 0,0,2],
                # --------------------
                [0,2,0, 0,3,1, 0,0,7],
                [0,0,0, 0,8,0, 0,0,0],
                [1,0,0, 9,5,0, 0,6,0],
                # --------------------
                [7,0,0, 0,9,0, 0,0,1],
                [0,0,1, 2,0,0, 3,0,6],
                [0,3,0, 0,0,0, 0,5,9],
            ],
        ),
        # 4. check_sudoku should return True: hard
        (
            [
                [1,6,2, 8,5,7, 4,9,3],
                [5,3,4, 1,2,9, 6,7,8],
                [7,8,9, 6,4,3, 5,2,1],
                # --------------------
                [4,7,5, 3,1,2, 9,8,6],
                [9,1,3, 5,8,6, 7,4,2],
                [6,2,8, 7,9,4, 1,3,5],
                # --------------------
                [3,5,6, 4,7,8, 2,1,9],
                [2,4,1, 9,3,5, 8,6,7],
                [8,9,7, 2,6,1, 3,5,4],
            ],
            [
                [1,0,0, 0,0,7, 0,9,0],
                [0,3,0, 0,2,0, 0,0,8],
                [0,0,9, 6,0,0, 5,0,0],
                # --------------------
                [0,0,5, 3,0,0, 9,0,0],
                [0,1,0, 0,8,0, 0,0,2],
                [6,0,0, 0,0,4, 0,0,0],
                # --------------------
                [3,0,0, 0,0,0, 0,1,0],
                [0,4,0, 0,0,0, 0,0,7],
                [0,0,7, 0,0,0, 3,0,0],
            ],
        ),
        
        # 5. from blank
        (
            [
                [1, 2, 3, 4, 5, 6, 7, 8, 9], 
                [4, 5, 6, 7, 8, 9, 1, 2, 3], 
                [7, 8, 9, 1, 2, 3, 4, 5, 6], 
                [2, 1, 4, 3, 6, 5, 8, 9, 7], 
                [3, 6, 5, 8, 9, 7, 2, 1, 4], 
                [8, 9, 7, 2, 1, 4, 3, 6, 5], 
                [5, 3, 1, 6, 4, 2, 9, 7, 8], 
                [6, 4, 2, 9, 7, 8, 5, 3, 1], 
                [9, 7, 8, 5, 3, 1, 6, 4, 2]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
        ),
        ( # 8.
            False, 
            [
                [5,3,4, 6,7,8, 9,1,2],
                [6,7,2, 1,9,5, 3,4,8],
                [1,9,8, 3,4,2, 5,6,7],
                # ------------------
                [8,5,9, 7,6,1, 4,2,3],
                [4,2,6, 8,5,3, 7,9, 10],  # <--- 10 is not in range for valid grid 
                [7,1,3, 9,2,4, 8,5,6],
                # ------------------
                [9,6,1, 5,3,7, 2,8,4],
                [2,8,7, 4,1,9, 6,3,5],
                [3,4,5, 2,8,6, 1,7,9],
            ],
        ),
        ( # 9.
            None, 
            [
                ['5',3,4, 6,7,8, 9,1,2], # <--- 5 is not an integer 
                [6,7,2, 1,9,5, 3,4,8],
                [1,9,8, 3,4,2, 5,6,7],
                # ------------------
                [8,5,9, 7,6,1, 4,2,3],
                [4,2,6, 8,5,3, 7,9,1], 
                [7,1,3, 9,2,4, 8,5,6],
                # ------------------
                [9,6,1, 5,3,7, 2,8,4],
                [2,8,7, 4,1,9, 6,3,5],
                [3,4,5, 2,8,6, 1,7,9],
            ],
        ),
        ( # 10.
            None, 
            [
                '[5,3,4, 6,7,8, 9,1,2],', # <--- row must be a list of integers
                [6,7,2, 1,9,5, 3,4,8],
                [1,9,8, 3,4,2, 5,6,7],
                # ------------------
                [8,5,9, 7,6,1, 4,2,3],
                [4,2,6, 8,5,3, 7,9,1],  
                [7,1,3, 9,2,4, 8,5,6],
                # ------------------
                [9,6,1, 5,3,7, 2,8,4],
                [2,8,7, 4,1,9, 6,3,5],
                [3,4,5, 2,8,6, 1,7,9],
            ],
        ),
        ( # 11.
            [
                [5,3,4, 6,7,8, 9,1,2],
                [6,7,2, 1,9,5, 3,4,8],
                [1,9,8, 3,4,2, 5,6,7],
                # ------------------
                [8,5,9, 7,6,1, 4,2,3],
                [4,2,6, 8,5,3, 7,9,1], 
                [7,1,3, 9,2,4, 8,5,6],
                # ------------------
                [9,6,1, 5,3,7, 2,8,4],
                [2,8,7, 4,1,9, 6,3,5],
                [3,4,5, 2,8,6, 1,7,9],
            ], 
            [
                [5,3,4, 6,7,8, 9,1,2],
                [6,7,2, 1,9,5, 3,4,8],
                [1,9,8, 3,4,2, 5,6,7],
                # ------------------
                [8,5,9, 7,6,1, 4,2,3],
                [4,2,6, 8,5,3, 7,9,1], 
                [7,1,3, 9,2,4, 8,5,6],
                # ------------------
                [9,6,1, 5,3,7, 2,8,4],
                [2,8,7, 4,1,9, 6,3,5],
                [3,4,5, 2,8,6, 1,7,9],
            ],
        ),
        (
            None, 
            "na",
        ),
        (
            None, 
            [
                [5,3,4, 6,7,8, 9,1,2],
                [6,7,2, 1,9,5, 3,4,8],
                [1,9,8, 3,4,2, 5,6,7],
                # ------------------
                [8,5,9, 7,6,1, 4,2,3],
                [4,2,6, 8,5,3, 7,9],  # <---
                [7,1,3, 9,2,4, 8,5,6],
                # ------------------
                [9,6,1, 5,3,7, 2,8,4],
                [2,8,7, 4,1,9, 6,3,5],
                [3,4,5, 2,8,6, 1,7,9],
            ],
        ),
        (
            False,
            [
                [2,9,0, 8,0,0, 0,7,0],
                [3,0,6, 0,0,8, 4,0,0],
                [8,0,0, 0,4,0, 0,0,2],
                # ------------------
                [0,2,0, 0,3,1, 0,0,7],
                [0,0,0, 0,8,0, 0,0,0],
                [1,0,0, 9,5,0, 0,6,0],
                # ------------------
                [7,0,0, 0,9,0, 0,0,1],
                [0,0,1, 2,0,0, 3,0,6],
                [0,3,0, 0,0,0, 0,5,9],
            ],
        ),
        (
            None,
            (
                [2,9,0, 8,0,0, 0,7,0],
                [3,0,6, 0,0,8, 4,0,0],
                [8,0,0, 0,4,0, 0,0,2],
                # ------------------
                [0,2,0, 0,3,1, 0,0,7],
                [0,0,0, 0,8,0, 0,0,0],
                [1,0,0, 9,5,0, 0,6,0],
                # ------------------
                [7,0,0, 0,9,0, 0,0,1],
                [0,0,1, 2,0,0, 3,0,6],
                [0,3,0, 0,0,0, 0,5,9],
            ),
        ),
    ]
    for id, (_, grid) in enumerate(data_test):
        compare(grid, id)
        
    