# encoding uft-8

# import repertory to test
import sys
sys.path.append("..")
from src.module import *

# import
import unittest
import random

class TestModule(unittest.TestCase):
    def setUp(self):
        self.Data = [
        # 0. check_sudoku should return None
        (
            None, 
            [
                [5,3,4, 6,7,8, 9,1,2],
                [6,7,2, 1,9,5, 3,4,8],
                [1,9,8, 3,4,2, 5,6,7],
                # ------------------
                [8,5,9, 7,6,1, 4,2,3],
                [4,2,6, 8,5,3, 7,9],  # <---
                [7,1,3, 9,2,4, 8,5,6],
                # ------------------
                [9,6,1, 5,3,7, 2,8,4],
                [2,8,7, 4,1,9, 6,3,5],
                [3,4,5, 2,8,6, 1,7,9],
            ],
            None,
            9, # size of grid
        ),

        # 1. check_sudoku should return True
        (   
            True, 
            [
                [5,3,4, 6,7,8, 9,1,2],
                [6,7,2, 1,9,5, 3,4,8],
                [1,9,8, 3,4,2, 5,6,7],
                # --------------------
                [8,5,9, 7,6,1, 4,2,3],
                [4,2,6, 8,5,3, 7,9,1],
                [7,1,3, 9,2,4, 8,5,6],
                # --------------------
                [9,6,1, 5,3,7, 2,8,4],
                [2,8,7, 4,1,9, 6,3,5],
                [3,4,5, 2,8,6, 1,7,9],
            ],
            [
                [5,3,4, 6,7,8, 9,1,2],
                [6,7,2, 1,9,5, 3,4,8],
                [1,9,8, 3,4,2, 5,6,7],
                # --------------------
                [8,5,9, 7,6,1, 4,2,3],
                [4,2,6, 8,5,3, 7,9,1],
                [7,1,3, 9,2,4, 8,5,6],
                # --------------------
                [9,6,1, 5,3,7, 2,8,4],
                [2,8,7, 4,1,9, 6,3,5],
                [3,4,5, 2,8,6, 1,7,9],
            ],
            9, # size of grid
        ),

        # 2. check_sudoku should return False
        (
            False, 
            False, 
            [
                [5,3,4, 6,7,8, 9,1,2],  # Two eight in second sub-grid (line 1: id 3 and 3: id 2)
                [6,7,2, 1,9,5, 3,4,8],
                [1,9,8, 3,8,2, 5,6,7],
                # ------------------
                [8,5,9, 7,6,1, 4,2,3],
                [4,2,6, 8,5,3, 7,9,1],
                [7,1,3, 9,2,4, 8,5,6],
                # ------------------
                [9,6,1, 5,3,7, 2,8,4],
                [2,8,7, 4,1,9, 6,3,5],
                [3,4,5, 2,8,6, 1,7,9],
            ],
            9, # size of grid
        ),

        # 3. check_sudoku should return True
        (
            True,
            [
                [2,9,0, 0,0,0, 0,7,0],
                [3,0,6, 0,0,8, 4,0,0],
                [8,0,0, 0,4,0, 0,0,2],
                # --------------------
                [0,2,0, 0,3,1, 0,0,7],
                [0,0,0, 0,8,0, 0,0,0],
                [1,0,0, 9,5,0, 0,6,0],
                # --------------------
                [7,0,0, 0,9,0, 0,0,1],
                [0,0,1, 2,0,0, 3,0,6],
                [0,3,0, 0,0,0, 0,5,9],
            ],
            [
                [2,9,4, 5,6,3, 1,7,8],
                [3,1,6, 7,2,8, 4,9,5],
                [8,5,7, 1,4,9, 6,3,2],
                # --------------------
                [6,2,9, 4,3,1, 5,8,7],
                [5,7,3, 6,8,2, 9,1,4],
                [1,4,8, 9,5,7, 2,6,3],
                # --------------------
                [7,6,5, 3,9,4, 8,2,1],
                [9,8,1, 2,7,5, 3,4,6],
                [4,3,2, 8,1,6, 7,5,9],
            ],
            9, # size of grid
        ),

        # 4. check_sudoku should return True
        (
            True,
            [
                [1,0,0, 0,0,7, 0,9,0],
                [0,3,0, 0,2,0, 0,0,8],
                [0,0,9, 6,0,0, 5,0,0],
                # --------------------
                [0,0,5, 3,0,0, 9,0,0],
                [0,1,0, 0,8,0, 0,0,2],
                [6,0,0, 0,0,4, 0,0,0],
                # --------------------
                [3,0,0, 0,0,0, 0,1,0],
                [0,4,0, 0,0,0, 0,0,7],
                [0,0,7, 0,0,0, 3,0,0],
            ],
            [
                [1,6,2, 8,5,7, 4,9,3],
                [5,3,4, 1,2,9, 6,7,8],
                [7,8,9, 6,4,3, 5,2,1],
                # --------------------
                [4,7,5, 3,1,2, 9,8,6],
                [9,1,3, 5,8,6, 7,4,2],
                [6,2,8, 7,9,4, 1,3,5],
                # --------------------
                [3,5,6, 4,7,8, 2,1,9],
                [2,4,1, 9,3,5, 8,6,7],
                [8,9,7, 2,6,1, 3,5,4],
            ],
            9, # size of grid
        ),
        
        (
            True,
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [1, 2, 3, 4, 5, 6, 7, 8, 9], 
                [4, 5, 6, 7, 8, 9, 1, 2, 3], 
                [7, 8, 9, 1, 2, 3, 4, 5, 6], 
                [2, 1, 4, 3, 6, 5, 8, 9, 7], 
                [3, 6, 5, 8, 9, 7, 2, 1, 4], 
                [8, 9, 7, 2, 1, 4, 3, 6, 5], 
                [5, 3, 1, 6, 4, 2, 9, 7, 8], 
                [6, 4, 2, 9, 7, 8, 5, 3, 1], 
                [9, 7, 8, 5, 3, 1, 6, 4, 2]
            ],
            9,
        ),
        
        # 5. 
        (
            True,
            [   # check_sudoku should return True
                [2,4, 3,0],
                [1,0, 0,2],
                #---------
                [3,0, 1,4],
                [0,0, 0,0],
            ],
            [   # solve_sudoku should return
                [2,4, 3,1],
                [1,3, 4,2],
                #---------
                [3,2, 1,4],
                [4,1, 2,3], 
            ],
            4, # size of grid
        ),
        
        # 6. check_sudoku should return True
        (
            True,
            [
                [2,4, 3,0],
                [1,0, 0,2],
                #---------
                [3,0, 0,0],
                [0,0, 0,0],
            ],
            [
                [2,4, 3,1],
                [1,3, 4,2], 
                # -----------
                [3,1, 2,4], 
                [4,2, 1,3]
            ],
            4, # size of grid
        ),
        
        # 7. check_sudoku should return 
        (
            False,
            [
                [2,4, 3,0],
                [1,0, 0,2],
                #---------
                [3,0, 4,0],
                [0,0, 0,0],
            ],
            False,
            4, # size of grid
        ),
        
        # 7. check_sudoku should return True
        (
            True,
            [
                [1,0,0,11, 2,0,0,10, 5,0,0,16, 0,0,0,0,],
                [0,4,0,10, 0,5,0,11, 0,15,0,0, 0,0,0,0,],
                [0,0,15,0, 0,0,14,0, 0,11,0,0, 0,0,0,0,],
                [0,0,0,16, 0,0,0,13, 0,10,0,0, 0,0,0,0,],
                # ---------------------------------------
                [0,0,0,0, 10,0,0,0, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,15,0,0, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,0,9,16, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,0,11,0, 0,0,0,0, 0,0,0,0,],
                # -------------------------------------
                [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,],
                # ------------------------------------
                [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,],
            ],
            [
                [1,3,6,11, 2,4,7,10, 5,8,9,16, 12,13,14,15], 
                [2,4,7,10, 1,5,3,11, 12,15,13,14, 6,8,9,16], 
                [5,8,15,13, 9,16,14,12, 1,11,2,6, 3,4,7,10], 
                [9,12,14,16, 6,8,15,13, 3,10,4,7, 1,2,5,11], 
                # ------------------------------------------
                [3,1,2,4, 10,6,5,7, 8,9,11,12, 13,15,16,14], 
                [6,5,8,7, 3,15,1,2, 4,14,16,13,9, 10,11,12], 
                [10,11,12,14, 4,13,9,16, 2,1,3,15, 5,6,8,7], 
                [13,9,16,15, 8,12,11,14, 6,5,7,10, 2,1,3,4], 
                # ------------------------------------------
                [4,2,1,3, 5,7,6,8, 9,12,10,11, 14,16,15,13], 
                [7,6,5,8, 11,1,2,15, 13,16,14,3, 4,12,10,9], 
                [11,14,10,12, 13,3,16,9, 15,2,1,4, 7,5,6,8], 
                [15,16,13,9, 12,14,10,4, 7,6,5,8, 11,3,1,2], 
                # ------------------------------------------
                [8,7,3,1, 14,2,4,5, 10,13,15,9, 16,11,12,6], 
                [12,10,4,2, 16,9,8,1, 11,7,6,5, 15,14,13,3], 
                [14,13,9,5, 15,11,12,6, 16,3,8,2, 10,7,4,1], 
                [16,15,11,6, 7,10,13,3, 14,4,12,1, 8,9,2,5]
            ],
            16,
        ),
        
        # 8. check_sudoku should return False
        (
            False,
            [
                [1,0,0,11, 2,0,0,10, 5,0,0,16, 0,0,0,0,],
                [0,4,0,10, 0,5,0,11, 0,15,0,0, 0,0,0,0,],
                [0,0,15,0, 0,0,14,0, 0,11,0,0, 0,0,0,0,],
                [0,0,0,16, 0,0,0,13, 0,10,0,0, 0,0,0,0,],
                # ---------------------------------------
                [1,0,0,11, 2,0,0,10, 5,0,0,16, 0,0,0,0,],
                [0,4,0,10, 0,5,0,11, 0,15,0,0, 0,0,0,0,],
                [0,0,15,0, 0,0,14,0, 0,11,0,0, 0,0,0,0,],
                [0,0,0,16, 0,0,0,13, 0,10,0,0, 0,0,0,0,],
                # ---------------------------------------
                [0,0,0,0, 10,0,0,0, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,15,0,0, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,0,9,16, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,0,11,0, 0,0,0,0, 0,0,0,0,],
                # ---------------------------------------
                [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,],
                [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,],
           ],
            False,
            16,
        ),
    ]
    
    def TestCheckSudoku(self):
        print('Test check_sudoku')
        for expected, grid, _, size in self.Data:
            return_ = check_sudoku(grid, size)
            self.assertEqual(expected, return_, f"We expected {expected}\nNot {return_}")
    
    def TestSolveSudoku(self):
        print("Test solve_sudoku")
        for _, grid, expected, _ in self.Data:
            return_ = solve_sudoku(grid)
            self.assertEqual(expected, return_, f"We expected {expected}\nNot {return_}")
    
    def TestPlaceRandomValue(self):
        print('Test place_random_value()')
        n_tests = 30
        perfect_square_number_list = [i * i for i in range(n_tests + 1)]
        seed_random_test = None # random.seed  # HOWTO GET THE SEED ?
        with open("./TestPlaceRandomValue_return.txt") as file:
            file.write(f"Current seed: {seed_random_test}\n")
            for test_id in range(n_tests):
                size = random.randint(4, test_id**2)
                if size in perfect_square_number_list:
                    empty_grid = generate_grid(size)
                    discoverd = random.randint(1, size**2)
                    if discoverd >= size**2 or discoverd < 0:
                        self.assertRaises(
                            ValueError, place_random_value, empty_grid, size, discoverd
                        )
                    else:
                        randomly_placed_grid = place_random_value(
                            empty_grid, size, discoverd
                        )
                        count = 0
                        for row in randomly_placed_grid:
                            for column in row:
                                if column != 0:
                                    count += 1
                        try:
                            assert (
                                count == discoverd
                            ), "Check function place random value placed {discoverd} but this is not the case.\n\t\tThe is only {count}"
                        except AssertionError as e:
                            file.write(
                                f"AssertionError: {e}\nExpected a count of: {discoverd}\nGet: {count}\n"
                                + ("=" * 20)
                                + "\n"
                            )
                else:
                    self.assertRaises(ValueError, generate_grid, size)

if __name__ == "__main__":
    unittest.main()
